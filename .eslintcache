[{"/home/itaybm2/test_react/src/reportWebVitals.js":"1","/home/itaybm2/test_react/src/index.jsx":"2","/home/itaybm2/test_react/src/App.jsx":"3"},{"size":362,"mtime":1606892313018,"results":"4","hashOfConfig":"5"},{"size":468,"mtime":1607243757471,"results":"6","hashOfConfig":"5"},{"size":14995,"mtime":1607419944959,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1c3amso",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"13"},"/home/itaybm2/test_react/src/reportWebVitals.js",[],["17","18"],"/home/itaybm2/test_react/src/index.jsx",[],["19","20"],"/home/itaybm2/test_react/src/App.jsx",["21","22","23","24","25","26","27"],"import React from 'react';\nimport './App.css';\nimport Helmet from 'react-helmet';\nimport FormControl from '@material-ui/core/FormControl';\nimport { createMuiTheme, withStyles, makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Pic from \"./Collage.png\";\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fields: { dough_weight: '', hydration: '', starter: '', starter_hydration: '', salt: '' },\n            errors: {}\n        }\n        this.baseState = this.state;\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.clearAll = this.clearAll.bind(this);\n    }\n\n    calculateIngredients(amounts) {\n        var starterWaterPer = amounts.starter / (1 + (1 / amounts.starter_hydration));\n        var starterSolidPer = amounts.starter - starterWaterPer;\n        var waterPer = amounts.hydration * (1 + amounts.salt + starterSolidPer) - starterWaterPer;\n        var flour = amounts.dough_weight / (1 + waterPer + amounts.starter + amounts.salt);\n        var starter = amounts.starter * flour;\n        var salt = amounts.salt * flour;\n        var water = waterPer * flour;\n        document.getElementById(\"result_flour\").innerHTML = parseInt(flour) + \"g\"\n        document.getElementById(\"result_water\").innerHTML = parseInt(water) + \"g\"\n        document.getElementById(\"result_starter\").innerHTML = parseInt(starter) + \"g\"\n        document.getElementById(\"result_salt\").innerHTML = parseInt(salt) + \"g\"\n    }\n    between(x, min, max) {\n        return x >= min && x <= max;\n    }\n\n    handleValidation() {\n        let fields = this.state.fields;\n        let errors = this.state.errors;\n        let formIsValid = true;\n\n        for (var key in fields) {\n            if (!fields[key]) {\n                formIsValid = false;\n                errors[key] = \"Cannot be empty\";\n            }\n\n            if (fields[key] < 0) {\n                formIsValid = false;\n                errors[key] = \"Field must be in range [1,100]\";\n            }\n\n            if (key != \"dough_weight\") {\n                if (!(this.between(fields[key], 0, 100))) {\n                    formIsValid = false;\n                    errors[key] = \"Field must be in range [1,100]\";\n                }\n            }\n\n        }\n\n        this.setState({ errors: errors });\n        return formIsValid;\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let errors = this.state.errors;\n        if (this.handleValidation()) {\n            var dict = {\n                dough_weight: this.state.fields.dough_weight,\n                starter: parseFloat(this.state.fields.starter) / 100,\n                hydration: parseFloat(this.state.fields.hydration) / 100,\n                starter_hydration: parseFloat(this.state.fields.starter_hydration) / 100,\n                salt: parseFloat(this.state.fields.salt) / 100\n            };\n            this.calculateIngredients(dict);\n            this.setState({ errors: {} })\n        }\n        else {\n            this.setState({ errors });\n        }\n    }\n\n    clearAll(event) {\n        event.preventDefault();\n        document.getElementById(\"result_flour\").innerHTML = \"0g\";\n        document.getElementById(\"result_starter\").innerHTML = \"0g\";\n        document.getElementById(\"result_salt\").innerHTML = \"0g\";\n        document.getElementById(\"result_water\").innerHTML = \"0g\";\n        this.setState({\n            fields: { dough_weight: '', hydration: '', starter: '', starter_hydration: '', salt: '' },\n            errors: {}\n        });\n    }\n    handleChange(field, event) {\n        let fields = this.state.fields;\n        fields[field] = event.target.value;\n        // const value = target.value;\n        // const name = target.name;\n        this.setState({\n            fields\n        });\n    }\n\n\n    render() {\n\n        const Typ = withStyles({\n            root: {\n                color: \"#4E4E4E\",\n            }\n        })(Typography);\n\n\n        return (\n            <Box margin={15}>\n                <Helmet>\n                    <title>\n                        Bread Calculator\n                    </title>\n\n                </Helmet>\n                <Grid container spacing={5} align='center' justify='space-around'>\n                    <Grid style={{ padding: 50 }} item xs={12} sm={12}>\n                        <Typ variant=\"h3\" component=\"h1\" >Sourdough Bread Calculator</Typ>\n                    </Grid>\n\n\n                    <Grid item align='center' xs={12} sm={9} lg={3} >\n                        <Box\n                            style={{\n                                height: '100%',\n                                width:'100',\n                                border: 'solid',\n                                borderWidth: 1,\n                                borderColor: 'black',\n                                borderRadius: 5,\n                                background: 'white',\n                            }}>\n                            <Grid item md={12} sm={12}>\n                                <Typ variant=\"h5\" component=\"h1\" >Ingredients:</Typ>\n                            </Grid>\n                            <Grid container item align='center' justify='center'>\n\n                                <FormControl onSubmit={this.handleSubmit} >\n                                    <Grid item display='flex' justifyContent='center'>\n                                        <TextField\n                                            label=\"Dough Weight\"\n                                            InputProps={{\n                                                inputProps: {\n                                                    min: 0\n                                                }\n                                            }}\n                                            name=\"dough_weight\"\n                                            id=\"dough_weight\"\n                                            inputmode=\"numeric\"\n                                            placeholder=\"Dough Weight in grams\"\n                                            value={this.state.fields.dough_weight}\n                                            error={this.state.errors.dough_weight}\n                                            helperText={this.state.errors.dough_weight ? this.state.errors.dough_weight : \"\"}\n                                            onChange={this.handleChange.bind(this, \"dough_weight\")}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={12} md={12}>\n                                        <TextField\n                                            label=\"Hydration\"\n                                            name=\"hydration\"\n                                            id=\"hydration\"\n                                            InputProps={{\n                                                inputProps: {\n                                                    min: '0', max: '100'\n                                                }\n                                            }}\n                                            placeholder=\"Final Hydration\"\n                                            error={this.state.errors.hydration}\n                                            helperText={this.state.errors.hydration ? this.state.errors.hydration : \"\"}\n                                            value={this.state.fields.hydration}\n                                            onChange={this.handleChange.bind(this, \"hydration\")}\n                                        />\n                                    </Grid>\n\n                                    <Grid item sm={12}>\n                                        <TextField\n                                            label=\"Starter\"\n                                            name=\"starter\"\n                                            id=\"starter\"\n                                            min=\"0\"\n                                            max=\"100\"\n                                            placeholder=\"Starter Percentage\"\n                                            error={this.state.errors.starter}\n                                            helperText={this.state.errors.starter ? this.state.errors.starter : \"\"}\n                                            value={this.state.fields.starter}\n                                            onChange={this.handleChange.bind(this, \"starter\")}\n                                        />\n                                    </Grid>\n\n                                    <Grid item sm={12}>\n                                        <TextField\n                                            label=\"Starter Hydration\"\n                                            name=\"starter_hydration\"\n                                            id=\"starter_hydration\"\n                                            placeholder=\"Starter Hydration\"\n                                            error={this.state.errors.starter_hydration}\n                                            helperText={this.state.errors.starter_hydration ? this.state.errors.starter_hydration : \"\"}\n                                            value={this.state.fields.starter_hydration}\n                                            onChange={this.handleChange.bind(this, \"starter_hydration\")}\n                                        />\n                                    </Grid>\n\n                                    <Grid item sm={12}>\n                                        <TextField\n                                            label=\"Salt\"\n                                            name=\"salt\"\n                                            errorte\n                                            id=\"salt\"\n                                            placeholder=\"Salt Percentage\"\n                                            error={this.state.errors.salt}\n                                            helperText={this.state.errors.salt ? \"Cannot be empty\" : \"\"}\n                                            value={this.state.fields.salt}\n                                            onChange={this.handleChange.bind(this, \"salt\")}\n                                        />\n                                    </Grid>\n                                    <Grid item sm={12}>\n                                        <Box margin={5} display=\"flex\" justifyContent=\"center\">\n                                            <Box paddingRight=\"20%\">\n                                                <Button\n                                                    variant=\"outlined\"\n                                                    type=\"submit\"\n                                                    value=\"Submit\"\n                                                    gi onClick={this.handleSubmit}\n                                                >Calculate</Button>\n                                            </Box>\n                                            <Box>\n                                                <Button\n                                                    border=\"1px\"\n                                                    variant=\"outlined\"\n                                                    onClick={this.clearAll}\n                                                    className=\"div_button\"\n                                                >Clear</Button>\n                                            </Box>\n                                        </Box>\n                                    </Grid>\n                                </FormControl>\n                            </Grid>\n\n                        </Box>\n                    </Grid>\n\n                    <Grid item xs={12} sm={9} lg={3} >\n                        <Box style={{\n                            border: 'solid',\n                            height: '100%',\n                            borderWidth: 1,\n                            borderColor: 'black',\n                            borderRadius: 5,\n                            background: 'white',\n                        }}>\n                            <Grid item xs={12} sm={12}>\n                                <Typ style={{ paddingBottom: 20 }} variant=\"h5\" component=\"h1\">Totals:</Typ>\n                            </Grid>\n                            <Grid item sm={12}>\n                                <Box display=\"flex-box\">\n                                    <Typography variant=\"h6\" display=\"inline\" >Flour: </Typography>\n                                    <Typography variant=\"h6\" display=\"inline\" id=\"result_flour\"\n                                    >0g\n                        </Typography>\n                                </Box>\n                            </Grid>\n                            <Grid item sm={12}>\n                                <Box margin={4}>\n                                    <Typography variant=\"h6\" display=\"inline\" >Water: </Typography>\n                                    <Typography variant=\"h6\" display=\"inline\" id=\"result_water\"\n                                    >0g\n                        </Typography>\n                                </Box>\n                                <Grid item sm={12}>\n                                    <Box margin={4}>\n                                        <Typography variant=\"h6\" display=\"inline\" >Starter: </Typography>\n                                        <Typography variant=\"h6\" display=\"inline\" id=\"result_starter\"\n                                        >0g\n                        </Typography>\n                                    </Box>\n                                </Grid>\n                                <Grid item sm={12}>\n                                    <Box margin={4}>\n                                        <Typography variant=\"h6\" display=\"inline\" >Salt: </Typography>\n                                        <Typography variant=\"h6\" display=\"inline\" id=\"result_salt\"\n                                        >0g\n                                </Typography>\n                                    </Box>\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Grid>\n                    <Grid item alignContent='center' align='center' item xs={12} lg={5}>\n                        <CardMedia src={Pic} component=\"img\"></CardMedia>\n                    </Grid>\n                </Grid >\n            </Box >\n\n\n        );\n    }\n}\n\nexport default App;",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"28","replacedBy":"32"},{"ruleId":"30","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":5,"column":10,"nodeType":"36","messageId":"37","endLine":5,"endColumn":24},{"ruleId":"34","severity":1,"message":"38","line":5,"column":38,"nodeType":"36","messageId":"37","endLine":5,"endColumn":48},{"ruleId":"34","severity":1,"message":"39","line":6,"column":8,"nodeType":"36","messageId":"37","endLine":6,"endColumn":18},{"ruleId":"34","severity":1,"message":"40","line":9,"column":8,"nodeType":"36","messageId":"37","endLine":9,"endColumn":17},{"ruleId":"34","severity":1,"message":"41","line":15,"column":8,"nodeType":"36","messageId":"37","endLine":15,"endColumn":13},{"ruleId":"42","severity":1,"message":"43","line":63,"column":21,"nodeType":"44","messageId":"45","endLine":63,"endColumn":23},{"ruleId":"46","severity":1,"message":"47","line":306,"column":69,"nodeType":"48","endLine":306,"endColumn":73},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],["49"],["50"],"no-unused-vars","'createMuiTheme' is defined but never used.","Identifier","unusedVar","'makeStyles' is defined but never used.","'InputLabel' is defined but never used.","'FormLabel' is defined but never used.","'Paper' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]