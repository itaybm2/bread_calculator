{"version":3,"sources":["Collage.png","App.jsx","reportWebVitals.js","index.jsx"],"names":["App","props","state","fields","dough_weight","hydration","starter","starter_hydration","salt","errors","baseState","handleChange","bind","handleSubmit","clearAll","amounts","starterWaterPer","starterSolidPer","waterPer","flour","water","document","getElementById","innerHTML","parseInt","this","formIsValid","setState","event","preventDefault","handleValidation","dict","parseFloat","calculateIngredients","field","target","value","classes","Typ","withStyles","root","color","Typography","display","Box","Helmet","Grid","container","spacing","justify","style","padding","item","xs","variant","component","className","lg","FormControl","onSubmit","TextField","label","type","name","id","inputmode","min","placeholder","error","helperText","onChange","max","Starter","errorte","md","CardMedia","src","Pic","margin","justifyContent","paddingRight","Button","gi","onClick","border","React","Component","theme","media","height","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"0UAAe,MAA0B,oC,SC2BnCA,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,OAAQ,CAAEC,aAAc,GAAIC,UAAW,GAAIC,QAAS,GAAIC,kBAAmB,GAAIC,KAAM,IACrFC,OAAQ,IAEZ,EAAKC,UAAY,EAAKR,MACtB,EAAKS,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBATD,E,iEAYEG,GACjB,IAAIC,EAAkBD,EAAQT,SAAW,EAAK,EAAIS,EAAQR,mBACtDU,EAAkBF,EAAQT,QAAUU,EACpCE,EAAWH,EAAQV,WAAa,EAAIU,EAAQP,KAAOS,GAAmBD,EACtEG,EAAQJ,EAAQX,cAAgB,EAAIc,EAAWH,EAAQT,QAAUS,EAAQP,MACzEF,EAAUS,EAAQT,QAAUa,EAC5BX,EAAOO,EAAQP,KAAOW,EACtBC,EAAQF,EAAWC,EACvBE,SAASC,eAAe,gBAAgBC,UAAYC,SAASL,GAAS,IACtEE,SAASC,eAAe,gBAAgBC,UAAYC,SAASJ,GAAS,IACtEC,SAASC,eAAe,kBAAkBC,UAAYC,SAASlB,GAAW,IAC1Ee,SAASC,eAAe,eAAeC,UAAYC,SAAShB,GAAQ,M,yCAIpE,IAAIL,EAASsB,KAAKvB,MAAMC,OACpBM,EAASgB,KAAKvB,MAAMO,OACpBiB,GAAc,EAuBlB,OArBKvB,EAAM,eACPuB,GAAc,EACdD,KAAKvB,MAAMO,OAAX,aAAoC,mBAEnCN,EAAM,YACPuB,GAAc,EACdjB,EAAOJ,UAAY,mBAElBF,EAAM,UACPuB,GAAc,EACdjB,EAAOH,QAAU,mBAEhBH,EAAM,oBACPuB,GAAc,EACdjB,EAAOF,kBAAoB,mBAE1BJ,EAAM,OACPuB,GAAc,EACdjB,EAAOD,KAAO,mBAElBiB,KAAKE,SAAS,CAAElB,OAAQA,IACjBiB,I,mCAGEE,GACTA,EAAMC,iBACN,IAAIpB,EAASgB,KAAKvB,MAAMO,OACxB,GAAIgB,KAAKK,mBAAoB,CACzB,IAAIC,EAAO,CACP3B,aAAcqB,KAAKvB,MAAMC,OAAOC,aAChCE,QAAS0B,WAAWP,KAAKvB,MAAMC,OAAOG,SAAW,IACjDD,UAAW2B,WAAWP,KAAKvB,MAAMC,OAAOE,WAAa,IACrDE,kBAAmByB,WAAWP,KAAKvB,MAAMC,OAAOI,mBAAqB,IACrEC,KAAMwB,WAAWP,KAAKvB,MAAMC,OAAOK,MAAQ,KAE/CiB,KAAKQ,qBAAqBF,QAG1BN,KAAKE,SAAS,CAAClB,a,+BAIdmB,GACLA,EAAMC,iBACNR,SAASC,eAAe,gBAAgBC,UAAY,KACpDF,SAASC,eAAe,kBAAkBC,UAAY,KACtDF,SAASC,eAAe,eAAeC,UAAY,KACnDF,SAASC,eAAe,gBAAgBC,UAAY,KACpDE,KAAKE,SAAS,CACVxB,OAAQ,CAAEC,aAAc,GAAIC,UAAW,GAAIC,QAAS,GAAIC,kBAAmB,GAAIC,KAAM,IACrFC,OAAQ,O,mCAGHyB,EAAON,GAChB,IAAIzB,EAASsB,KAAKvB,MAAMC,OACxBA,EAAO+B,GAASN,EAAMO,OAAOC,MAG7BX,KAAKE,SAAS,CACVxB,a,+BAMgBsB,KAAKxB,MAAjBoC,QADF,IAGAC,EAAMC,YAAW,CACnBC,KAAM,CACFC,MAAO,YAFHF,CAITG,KAEeH,YAAW,CACzBC,KAAM,CACFG,QAAS,SAFCJ,CAIfK,KAEH,OAEI,eAACA,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,uDAIJ,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAApC,UACI,cAACH,EAAA,EAAD,CAAMI,MAAO,CAAEC,QAAS,IAAMC,MAAI,EAACC,GAAI,GAAvC,SACI,cAACf,EAAD,CAAKgB,QAAQ,KAAKC,UAAU,KAAKZ,QAAQ,OAAzC,0CAEJ,cAACG,EAAA,EAAD,CAAMM,MAAI,EAACI,UAAU,OAAOC,GAAI,EAAhC,SACI,cAACb,EAAA,EAAD,UACI,eAACc,EAAA,EAAD,CAAaF,UAAU,OAAOG,SAAUlC,KAAKZ,aAA7C,UACI,cAACyB,EAAD,CAAKgB,QAAQ,KAAb,0BACA,cAACM,EAAA,EAAD,CACIC,MAAM,eACNC,KAAK,SACLC,KAAK,eACLC,GAAG,eACHC,UAAU,UACVC,IAAI,IACJC,YAAY,wBACZ/B,MAAOX,KAAKvB,MAAMC,OAAOC,aACzBgE,MAAO3C,KAAKvB,MAAMO,OAAOL,aACzBiE,WAAY5C,KAAKvB,MAAMO,OAAOL,aAAe,kBAAoB,GACjEkE,SAAU7C,KAAKd,aAAaC,KAAKa,KAAM,kBAG3C,cAACmC,EAAA,EAAD,CACIC,MAAM,YACNC,KAAK,SACLC,KAAK,YACLC,GAAG,YACHE,IAAI,IACJK,IAAI,MACJJ,YAAY,kBACZC,MAAO3C,KAAKvB,MAAMO,OAAOJ,UACzBgE,WAAY5C,KAAKvB,MAAMO,OAAOJ,UAAY,kBAAoB,GAC9D+B,MAAOX,KAAKvB,MAAMC,OAAOE,UACzBiE,SAAU7C,KAAKd,aAAaC,KAAKa,KAAM,eAG3C,cAACmC,EAAA,EAAD,CACIE,KAAK,SACLD,MAAM,UACNE,KAAK,UACLC,GAAG,UACHE,IAAI,IACJK,IAAI,MACJJ,YAAY,qBACZC,MAAO3C,KAAKvB,MAAMO,OAAOH,QACzB+D,WAAY5C,KAAKvB,MAAMO,OAAO+D,QAAU,kBAAoB,GAC5DpC,MAAOX,KAAKvB,MAAMC,OAAOG,QACzBgE,SAAU7C,KAAKd,aAAaC,KAAKa,KAAM,aAG3C,cAACmC,EAAA,EAAD,CACIC,MAAM,oBACNC,KAAK,SACLC,KAAK,oBACLC,GAAG,oBACHE,IAAI,IACJK,IAAI,MACJJ,YAAY,oBACZC,MAAO3C,KAAKvB,MAAMO,OAAOF,kBACzB8D,WAAY5C,KAAKvB,MAAMO,OAAOF,kBAAoB,kBAAoB,GACtE6B,MAAOX,KAAKvB,MAAMC,OAAOI,kBACzB+D,SAAU7C,KAAKd,aAAaC,KAAKa,KAAM,uBAG3C,cAACmC,EAAA,EAAD,CACIC,MAAM,OACNC,KAAK,SACLC,KAAK,OACLU,SAAO,EACPT,GAAG,OACHE,IAAI,IACJK,IAAI,MACJJ,YAAY,kBACZC,MAAO3C,KAAKvB,MAAMO,OAAOD,KACzB6D,WAAY5C,KAAKvB,MAAMO,OAAOD,KAAO,kBAAoB,GACzD4B,MAAOX,KAAKvB,MAAMC,OAAOK,KACzB8D,SAAU7C,KAAKd,aAAaC,KAAKa,KAAM,iBAMvD,cAACqB,EAAA,EAAD,CAAMM,MAAI,EAACsB,GAAI,EAAGzB,QAAQ,SAASO,UAAU,OAA7C,SACI,eAACZ,EAAA,EAAD,CAAKD,QAAQ,WAAb,UACI,cAACL,EAAD,CAAKgB,QAAQ,KAAb,qBACA,eAACV,EAAA,EAAD,WACI,6CACA,sBACIoB,GAAG,eADP,mBAKJ,eAACpB,EAAA,EAAD,WACI,6CACA,sBACIoB,GAAG,eADP,mBAKJ,eAACpB,EAAA,EAAD,WACI,+CACA,sBACIoB,GAAG,iBADP,mBAKJ,eAACpB,EAAA,EAAD,WACI,4CACA,sBACIoB,GAAG,cADP,wBAOZ,cAAClB,EAAA,EAAD,CAAMM,MAAI,EAACsB,GAAI,EAAf,SACI,cAACC,EAAA,EAAD,CAAWC,IAAKC,EAAKtB,UAAU,UAEnC,cAACT,EAAA,EAAD,CAAMM,MAAI,EAACK,GAAI,EAAGT,QAAS,EAA3B,SACI,eAACJ,EAAA,EAAD,CAAKkC,OAAQ,EAAGnC,QAAQ,OAAOoC,eAAe,SAA9C,UACI,cAACnC,EAAA,EAAD,CAAKoC,aAAa,MAAlB,SACI,cAACC,EAAA,EAAD,CACI3B,QAAQ,WACRH,QAAQ,OACRW,KAAK,SACL1B,MAAM,SACN8C,IAAE,EAACC,QAAS1D,KAAKZ,aALrB,yBAQJ,cAAC+B,EAAA,EAAD,UACI,cAACqC,EAAA,EAAD,CACIG,OAAO,MACPjC,QAAQ,OACRG,QAAQ,WACR6B,QAAS1D,KAAKX,SACd0C,UAAU,aALd,oC,GAzPd6B,IAAMC,WAyQT/C,eApRA,SAACgD,GAAD,oBACX/C,KAAM,GACNgD,MAAO,CACHC,OAAQ,EACRC,MAAO,IAJA,OAML,MA8QKnD,CAAmBvC,GCxRnB2F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACF,cAAC,EAAD,IACChF,SAASC,eAAe,SAOhCqE,M","file":"static/js/main.2751a166.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Collage.06a8e72e.png\";","import React from 'react';\nimport './App.css';\nimport Helmet from 'react-helmet';\nimport FormControl from '@material-ui/core/FormControl';\nimport { createMuiTheme, withStyles, styled } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Pic from \"./Collage.png\";\nimport Grid from '@material-ui/core/Grid';\n\n\nconst styles = (theme) => ({\n    root: {},\n    media: {\n        height: 0,\n        width: 0\n    },\n    root: {\n\n    }\n});\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fields: { dough_weight: '', hydration: '', starter: '', starter_hydration: '', salt: '' },\n            errors: {}\n        }\n        this.baseState = this.state;\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.clearAll = this.clearAll.bind(this);\n    }\n\n    calculateIngredients(amounts) {\n        var starterWaterPer = amounts.starter / (1 + (1 / amounts.starter_hydration));\n        var starterSolidPer = amounts.starter - starterWaterPer;\n        var waterPer = amounts.hydration * (1 + amounts.salt + starterSolidPer) - starterWaterPer;\n        var flour = amounts.dough_weight / (1 + waterPer + amounts.starter + amounts.salt);\n        var starter = amounts.starter * flour;\n        var salt = amounts.salt * flour;\n        var water = waterPer * flour;\n        document.getElementById(\"result_flour\").innerHTML = parseInt(flour) + \"g\"\n        document.getElementById(\"result_water\").innerHTML = parseInt(water) + \"g\"\n        document.getElementById(\"result_starter\").innerHTML = parseInt(starter) + \"g\"\n        document.getElementById(\"result_salt\").innerHTML = parseInt(salt) + \"g\"\n    }\n\n    handleValidation() {\n        let fields = this.state.fields;\n        let errors = this.state.errors;\n        let formIsValid = true;\n\n        if (!fields[\"dough_weight\"]) {\n            formIsValid = false;\n            this.state.errors[\"dough_weight\"] = \"Cannot be empty\";\n        }\n        if (!fields[\"hydration\"]) {\n            formIsValid = false;\n            errors.hydration = \"Cannot be empty\";\n        }\n        if (!fields[\"starter\"]) {\n            formIsValid = false;\n            errors.starter = \"Cannot be empty\";\n        }\n        if (!fields[\"starter_hydration\"]) {\n            formIsValid = false;\n            errors.starter_hydration = \"Cannot be empty\";\n        }\n        if (!fields[\"salt\"]) {\n            formIsValid = false;\n            errors.salt = \"Cannot be empty\";\n        }\n        this.setState({ errors: errors });\n        return formIsValid;\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let errors = this.state.errors;\n        if (this.handleValidation()) {\n            var dict = {\n                dough_weight: this.state.fields.dough_weight,\n                starter: parseFloat(this.state.fields.starter) / 100,\n                hydration: parseFloat(this.state.fields.hydration) / 100,\n                starter_hydration: parseFloat(this.state.fields.starter_hydration) / 100,\n                salt: parseFloat(this.state.fields.salt) / 100\n            };\n            this.calculateIngredients(dict);\n        }\n        else{\n            this.setState({errors});\n               }\n    }\n\n    clearAll(event) {\n        event.preventDefault();\n        document.getElementById(\"result_flour\").innerHTML = \"0g\";\n        document.getElementById(\"result_starter\").innerHTML = \"0g\";\n        document.getElementById(\"result_salt\").innerHTML = \"0g\";\n        document.getElementById(\"result_water\").innerHTML = \"0g\";\n        this.setState({\n            fields: { dough_weight: '', hydration: '', starter: '', starter_hydration: '', salt: '' },\n            errors: {}\n        });\n    }\n    handleChange(field, event) {\n        let fields = this.state.fields;\n        fields[field] = event.target.value;\n        // const value = target.value;\n        // const name = target.name;\n        this.setState({\n            fields\n        });\n    }\n\n\n    render() {\n        const { classes } = this.props;\n\n        const Typ = withStyles({\n            root: {\n                color: \"#92540d\",\n            }\n        })(Typography);\n\n        const styledBox = withStyles({\n            root: {\n                display: \"flex\",\n            }\n        })(Box);\n\n        return (\n\n            <Box>\n                <Helmet>\n                    <title>\n                        Bread Calculator\n                </title>\n                </Helmet>\n                <Grid container spacing={4} justify=\"center\">\n                    <Grid style={{ padding: 50 }} item xs={12}>\n                        <Typ variant=\"h2\" component=\"h1\" display=\"flex\">Sourdough Bread Calculator</Typ>\n                    </Grid>\n                    <Grid item className=\"root\" lg={2}>\n                        <Box>\n                            <FormControl className=\"form\" onSubmit={this.handleSubmit} >\n                                <Typ variant=\"h5\" >Ingredients:</Typ>\n                                <TextField\n                                    label=\"Dough Weight\"\n                                    type=\"number\"\n                                    name=\"dough_weight\"\n                                    id=\"dough_weight\"\n                                    inputmode=\"numeric\"\n                                    min=\"0\"\n                                    placeholder=\"Dough Weight in grams\"\n                                    value={this.state.fields.dough_weight}\n                                    error={this.state.errors.dough_weight}\n                                    helperText={this.state.errors.dough_weight ? \"Cannot be empty\" : \"\"}\n                                    onChange={this.handleChange.bind(this, \"dough_weight\")}\n                                />\n\n                                <TextField\n                                    label=\"Hydration\"\n                                    type=\"number\"\n                                    name=\"hydration\"\n                                    id=\"hydration\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    placeholder=\"Final Hydration\"\n                                    error={this.state.errors.hydration}\n                                    helperText={this.state.errors.hydration ? \"Cannot be empty\" : \"\"}\n                                    value={this.state.fields.hydration}\n                                    onChange={this.handleChange.bind(this, \"hydration\")}\n                                />\n\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Starter\"\n                                    name=\"starter\"\n                                    id=\"starter\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    placeholder=\"Starter Percentage\"\n                                    error={this.state.errors.starter}\n                                    helperText={this.state.errors.Starter ? \"Cannot be empty\" : \"\"}\n                                    value={this.state.fields.starter}\n                                    onChange={this.handleChange.bind(this, \"starter\")}\n                                />\n\n                                <TextField \n                                    label=\"Starter Hydration\"\n                                    type=\"number\"\n                                    name=\"starter_hydration\"\n                                    id=\"starter_hydration\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    placeholder=\"Starter Hydration\"\n                                    error={this.state.errors.starter_hydration}\n                                    helperText={this.state.errors.starter_hydration ? \"Cannot be empty\" : \"\"}\n                                    value={this.state.fields.starter_hydration}\n                                    onChange={this.handleChange.bind(this, \"starter_hydration\")}\n                                />\n\n                                <TextField\n                                    label=\"Salt\"\n                                    type=\"number\"\n                                    name=\"salt\"\n                                    errorte\n                                    id=\"salt\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    placeholder=\"Salt Percentage\"\n                                    error={this.state.errors.salt}\n                                    helperText={this.state.errors.salt ? \"Cannot be empty\" : \"\"}\n                                    value={this.state.fields.salt}\n                                    onChange={this.handleChange.bind(this, \"salt\")}\n                                />\n\n                            </FormControl>\n                        </Box>\n                    </Grid>\n                    <Grid item md={1} justify=\"center\" className=\"root\">\n                        <Box display=\"flex-box\">\n                            <Typ variant=\"h5\">Totals:</Typ>\n                            <Box>\n                                <strong>Flour: </strong>\n                                <text\n                                    id=\"result_flour\"\n                                >0g\n                                </text>\n                            </Box>\n                            <Box>\n                                <strong>Water: </strong>\n                                <text\n                                    id=\"result_water\"\n                                >0g\n                                </text>\n                            </Box>\n                            <Box>\n                                <strong>Starter: </strong>\n                                <text\n                                    id=\"result_starter\"\n                                >0g\n                                </text>\n                            </Box>\n                            <Box>\n                                <strong>Salt: </strong>\n                                <text\n                                    id=\"result_salt\"\n                                >0g\n                                </text>\n                            </Box>\n                        </Box>\n                    </Grid>\n                    <Grid item md={4}>\n                        <CardMedia src={Pic} component=\"img\"></CardMedia>\n                    </Grid>\n                    <Grid item lg={9} spacing={2}>\n                        <Box margin={5} display=\"flex\" justifyContent=\"center\">\n                            <Box paddingRight=\"20%\">\n                                <Button\n                                    variant=\"outlined\"\n                                    padding=\"20px\"\n                                    type=\"submit\"\n                                    value=\"Submit\"\n                                    gi onClick={this.handleSubmit}\n                                >Calculate</Button>\n                            </Box>\n                            <Box>\n                                <Button\n                                    border=\"1px\"\n                                    padding=\"40px\"\n                                    variant=\"outlined\"\n                                    onClick={this.clearAll}\n                                    className=\"div_button\"\n                                >Clear</Button>\n                            </Box>\n                        </Box>\n                    </Grid>\n                </Grid >\n            </Box>\n        );\n    }\n}\n\nexport default withStyles(styles)(App);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n       <App/>,\n        document.getElementById('root'),\n)\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}