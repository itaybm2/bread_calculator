[{"/home/itaybm2/test_react/src/reportWebVitals.js":"1","/home/itaybm2/test_react/src/index.jsx":"2","/home/itaybm2/test_react/src/App.jsx":"3"},{"size":362,"mtime":1606892313018,"results":"4","hashOfConfig":"5"},{"size":468,"mtime":1607243757471,"results":"6","hashOfConfig":"5"},{"size":10922,"mtime":1607248771843,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1c3amso",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/home/itaybm2/test_react/src/reportWebVitals.js",[],["16","17"],"/home/itaybm2/test_react/src/index.jsx",[],"/home/itaybm2/test_react/src/App.jsx",["18","19","20","21","22","23"],"import React from 'react';\nimport './App.css';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Pic from \"./Collage.png\";\nimport Pic1 from \"./pic1.png\";\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fields: { dough_weight: '', hydration: '', starter: '', starter_hydration: '', salt: '' },\n            errors: {}\n        }\n        this.baseState = this.state;\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.clearAll = this.clearAll.bind(this);\n    }\n\n    calculateIngredients(amounts) {\n        var starterWaterPer = amounts.starter / (1 + (1 / amounts.starter_hydration));\n        var starterSolidPer = amounts.starter - starterWaterPer;\n        var waterPer = amounts.hydration * (1 + amounts.salt + starterSolidPer) - starterWaterPer;\n        var flour = amounts.dough_weight / (1 + waterPer + amounts.starter + amounts.salt);\n        var starter = amounts.starter * flour;\n        var salt = amounts.salt * flour;\n        var water = waterPer * flour;\n        document.getElementById(\"result_flour\").innerHTML = parseInt(flour) + \"g\"\n        document.getElementById(\"result_water\").innerHTML = parseInt(water) + \"g\"\n        document.getElementById(\"result_starter\").innerHTML = parseInt(starter) + \"g\"\n        document.getElementById(\"result_salt\").innerHTML = parseInt(salt) + \"g\"\n    }\n\n    handleValidation() {\n        let fields = this.state.fields;\n        let errors = {};\n        let formIsValid = true;\n\n        if (!fields[\"dough_weight\"]) {\n            formIsValid = false;\n            errors[\"dough_weight\"] = \"Cannot be empty\";\n        }\n        if (!fields[\"hydration\"]) {\n            formIsValid = false;\n            errors[\"hydration\"] = \"Cannot be empty\";\n        }\n        if (!fields[\"starter\"]) {\n            formIsValid = false;\n            errors[\"starter\"] = \"Cannot be empty\";\n        }\n        if (!fields[\"starter_hydration\"]) {\n            formIsValid = false;\n            errors[\"starter_hydration\"] = \"Cannot be empty\";\n        }\n        if (!fields[\"salt\"]) {\n            formIsValid = false;\n            errors[\"salt\"] = \"Cannot be empty\";\n        }\n        this.setState({ errors: errors });\n        return formIsValid;\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        if (this.handleValidation()) {\n            var dict = {\n                dough_weight: this.state.fields.dough_weight,\n                starter: parseFloat(this.state.fields.starter) / 100,\n                hydration: parseFloat(this.state.fields.hydration) / 100,\n                starter_hydration: parseFloat(this.state.fields.starter_hydration) / 100,\n                salt: parseFloat(this.state.fields.salt) / 100\n            };\n            this.calculateIngredients(dict);\n        }\n    }\n\n    clearAll(event) {\n        event.preventDefault();\n        document.getElementById(\"result_flour\").innerHTML = \"0g\";\n        document.getElementById(\"result_starter\").innerHTML = \"0g\";\n        document.getElementById(\"result_salt\").innerHTML = \"0g\";\n        document.getElementById(\"result_water\").innerHTML = \"0g\";\n        this.setState({\n            fields: { dough_weight: '', hydration: '', starter: '', starter_hydration: '', salt: '' },\n            errors: {}\n        });\n    }\n    handleChange(field, event) {\n        let fields = this.state.fields;\n        fields[field] = event.target.value;\n        // const value = target.value;\n        // const name = target.name;\n        this.setState({\n            fields\n        });\n    }\n\n    render() {\n        const {classes} = this.props;\n        const styles =\n        {\n\n            media: {\n                height:'50%'\n            }\n        };\n        return (\n            <Box>\n                <Typography component=\"h1\" variant=\"h4\">Sourdough Calculator</Typography>\n                <Box id=\"calc\" className='flex-container'>\n                    <Box className=\"column1\">\n                        <h1 id=\"heading\">Ingredients:</h1>\n                        <form id=\"calculator-form\" onSubmit={this.handleSubmit} >\n                            <Box class=\"form-group\">\n                                <InputLabel>Dough Weight (g)</InputLabel>\n                                <TextField\n                                    type=\"number\"\n                                    name=\"dough_weight\"\n                                    id=\"dough_weight\"\n                                    inputmode=\"numeric\"\n                                    min=\"0\"\n                                    placeholder=\"Dough Weight in grams\"\n                                    value={this.state.fields.dough_weight}\n                                    onChange={this.handleChange.bind(this, \"dough_weight\")}\n                                />\n                                <Box>\n                                    <span style={{ color: \"red\" }}>{this.state.errors[\"dough_weight\"]}</span>\n                                </Box>\n                            </Box>\n\n                            <Box class=\"form-group\">\n                                <InputLabel for=\"formGroupExampleInput\">Final Hydration (%)</InputLabel>\n                                <TextField\n                                    type=\"number\"\n                                    name=\"hydration\"\n                                    id=\"hydration\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    placeholder=\"Final Hydration\"\n                                    value={this.state.fields.hydration}\n                                    onChange={this.handleChange.bind(this, \"hydration\")}\n                                />\n                                <Box>\n                                    <span style={{ color: \"red\" }}>{this.state.errors[\"hydration\"]}</span>\n                                </Box>\n                            </Box>\n\n                            <Box class=\"form-group\">\n                                <InputLabel for=\"formGroupExampleInput\">Starter (%)</InputLabel>\n                                <TextField\n                                    type=\"number\"\n                                    name=\"starter\"\n                                    id=\"starter\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    placeholder=\"Starter Percentage\"\n                                    value={this.state.fields.starter}\n                                    onChange={this.handleChange.bind(this, \"starter\")}\n                                />\n                                <Box>\n                                    <span style={{ color: \"red\" }}>{this.state.errors[\"starter\"]}</span>\n                                </Box>\n                            </Box>\n\n                            <Box class=\"form-group\">\n                                <InputLabel for=\"formGroupExampleInput\">Starter Hydration (%)</InputLabel>\n                                <TextField\n                                    type=\"number\"\n                                    name=\"starter_hydration\"\n                                    id=\"starter_hydration\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    placeholder=\"Starter Hydration\"\n                                    value={this.state.fields.starter_hydration}\n                                    onChange={this.handleChange.bind(this, \"starter_hydration\")}\n                                />\n                                <Box>\n                                    <span style={{ color: \"red\" }}>{this.state.errors[\"starter_hydration\"]}</span>\n                                </Box>\n                            </Box>\n\n                            <Box class=\"form-group\">\n                                <InputLabel for=\"formGroupExampleInput\">Salt (%)</InputLabel>\n                                <TextField\n                                    type=\"number\"\n                                    name=\"salt\"\n                                    id=\"salt\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    placeholder=\"Salt Percentage\"\n                                    value={this.state.fields.salt}\n                                    onChange={this.handleChange.bind(this, \"salt\")}\n                                />\n                                <Box>\n                                    <span className='error' style={{ color: \"red\" }}>{this.state.errors[\"salt\"]}</span>\n                                </Box>\n                            </Box>\n                            <Box className=\"div_button\">\n                                <Button type=\"submit\" value=\"Submit\">Calculate</Button>\n                                <Button\n                                    onClick={this.clearAll}\n                                    className=\"div_button\"\n                                >Clear</Button>\n                            </Box>\n                        </form>\n                    </Box>\n                    <Box class=\"column2\" onChange={this.handleChange} >\n                        <h1>Totals:</h1>\n                        <Box>\n                            <strong>Flour: </strong>\n                            <text\n                                id=\"result_flour\"\n                            >0g\n        </text>\n                        </Box>\n                        <Box>\n                            <strong>Water: </strong>\n                            <text\n                                id=\"result_water\"\n                            >0g\n    </text>\n                        </Box>\n                        <Box>\n                            <strong>Starter: </strong>\n                            <text\n                                id=\"result_starter\"\n                            >\n                                0g\n                            </text>\n                        </Box>\n                        <Box>\n                            <strong>Salt: </strong>\n                            <text\n                                id=\"result_salt\"\n                            >0g\n                            </text>\n                        </Box>\n                    </Box>\n                {/* <CardMedia src={Pic} styles={styles.media} component=\"img\" /> */}\n                </Box>\n            </Box>\n        );\n    }\n}\n\nexport default App;",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":3,"column":8,"nodeType":"30","messageId":"31","endLine":3,"endColumn":19},{"ruleId":"28","severity":1,"message":"32","line":9,"column":8,"nodeType":"30","messageId":"31","endLine":9,"endColumn":17},{"ruleId":"28","severity":1,"message":"33","line":10,"column":8,"nodeType":"30","messageId":"31","endLine":10,"endColumn":11},{"ruleId":"28","severity":1,"message":"34","line":11,"column":8,"nodeType":"30","messageId":"31","endLine":11,"endColumn":12},{"ruleId":"28","severity":1,"message":"35","line":106,"column":16,"nodeType":"30","messageId":"31","endLine":106,"endColumn":23},{"ruleId":"28","severity":1,"message":"36","line":107,"column":15,"nodeType":"30","messageId":"31","endLine":107,"endColumn":21},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'FormControl' is defined but never used.","Identifier","unusedVar","'CardMedia' is defined but never used.","'Pic' is defined but never used.","'Pic1' is defined but never used.","'classes' is assigned a value but never used.","'styles' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]