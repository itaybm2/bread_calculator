{"version":3,"sources":["App.jsx","Collage.png","pic1.png","reportWebVitals.js","index.jsx"],"names":["App","props","state","fields","dough_weight","hydration","starter","starter_hydration","salt","errors","baseState","handleChange","bind","handleSubmit","clearAll","amounts","starterWaterPer","starterSolidPer","waterPer","flour","water","document","getElementById","innerHTML","parseInt","this","formIsValid","setState","event","preventDefault","handleValidation","dict","parseFloat","calculateIngredients","field","target","value","classes","Box","Typography","component","variant","id","className","onSubmit","class","InputLabel","TextField","type","name","inputmode","min","placeholder","onChange","style","color","for","max","Button","onClick","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.0f5c821e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Pic from \"./Collage.png\";\nimport Pic1 from \"./pic1.png\";\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fields: { dough_weight: '', hydration: '', starter: '', starter_hydration: '', salt: '' },\n            errors: {}\n        }\n        this.baseState = this.state;\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.clearAll = this.clearAll.bind(this);\n    }\n\n    calculateIngredients(amounts) {\n        var starterWaterPer = amounts.starter / (1 + (1 / amounts.starter_hydration));\n        var starterSolidPer = amounts.starter - starterWaterPer;\n        var waterPer = amounts.hydration * (1 + amounts.salt + starterSolidPer) - starterWaterPer;\n        var flour = amounts.dough_weight / (1 + waterPer + amounts.starter + amounts.salt);\n        var starter = amounts.starter * flour;\n        var salt = amounts.salt * flour;\n        var water = waterPer * flour;\n        document.getElementById(\"result_flour\").innerHTML = parseInt(flour) + \"g\"\n        document.getElementById(\"result_water\").innerHTML = parseInt(water) + \"g\"\n        document.getElementById(\"result_starter\").innerHTML = parseInt(starter) + \"g\"\n        document.getElementById(\"result_salt\").innerHTML = parseInt(salt) + \"g\"\n    }\n\n    handleValidation() {\n        let fields = this.state.fields;\n        let errors = {};\n        let formIsValid = true;\n\n        if (!fields[\"dough_weight\"]) {\n            formIsValid = false;\n            errors[\"dough_weight\"] = \"Cannot be empty\";\n        }\n        if (!fields[\"hydration\"]) {\n            formIsValid = false;\n            errors[\"hydration\"] = \"Cannot be empty\";\n        }\n        if (!fields[\"starter\"]) {\n            formIsValid = false;\n            errors[\"starter\"] = \"Cannot be empty\";\n        }\n        if (!fields[\"starter_hydration\"]) {\n            formIsValid = false;\n            errors[\"starter_hydration\"] = \"Cannot be empty\";\n        }\n        if (!fields[\"salt\"]) {\n            formIsValid = false;\n            errors[\"salt\"] = \"Cannot be empty\";\n        }\n        this.setState({ errors: errors });\n        return formIsValid;\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        if (this.handleValidation()) {\n            var dict = {\n                dough_weight: this.state.fields.dough_weight,\n                starter: parseFloat(this.state.fields.starter) / 100,\n                hydration: parseFloat(this.state.fields.hydration) / 100,\n                starter_hydration: parseFloat(this.state.fields.starter_hydration) / 100,\n                salt: parseFloat(this.state.fields.salt) / 100\n            };\n            this.calculateIngredients(dict);\n        }\n    }\n\n    clearAll(event) {\n        event.preventDefault();\n        document.getElementById(\"result_flour\").innerHTML = \"0g\";\n        document.getElementById(\"result_starter\").innerHTML = \"0g\";\n        document.getElementById(\"result_salt\").innerHTML = \"0g\";\n        document.getElementById(\"result_water\").innerHTML = \"0g\";\n        this.setState({\n            fields: { dough_weight: '', hydration: '', starter: '', starter_hydration: '', salt: '' },\n            errors: {}\n        });\n    }\n    handleChange(field, event) {\n        let fields = this.state.fields;\n        fields[field] = event.target.value;\n        // const value = target.value;\n        // const name = target.name;\n        this.setState({\n            fields\n        });\n    }\n\n    render() {\n        const {classes} = this.props;\n        const styles =\n        {\n\n            media: {\n                height:'50%'\n            }\n        };\n        return (\n            <Box>\n                <Typography component=\"h1\" variant=\"h4\">Sourdough Calculator</Typography>\n                <Box id=\"calc\" className='flex-container'>\n                    <Box className=\"column1\">\n                        <h1 id=\"heading\">Ingredients:</h1>\n                        <form id=\"calculator-form\" onSubmit={this.handleSubmit} >\n                            <Box class=\"form-group\">\n                                <InputLabel>Dough Weight (g)</InputLabel>\n                                <TextField\n                                    type=\"number\"\n                                    name=\"dough_weight\"\n                                    id=\"dough_weight\"\n                                    inputmode=\"numeric\"\n                                    min=\"0\"\n                                    placeholder=\"Dough Weight in grams\"\n                                    value={this.state.fields.dough_weight}\n                                    onChange={this.handleChange.bind(this, \"dough_weight\")}\n                                />\n                                <Box>\n                                    <span style={{ color: \"red\" }}>{this.state.errors[\"dough_weight\"]}</span>\n                                </Box>\n                            </Box>\n\n                            <Box class=\"form-group\">\n                                <InputLabel for=\"formGroupExampleInput\">Final Hydration (%)</InputLabel>\n                                <TextField\n                                    type=\"number\"\n                                    name=\"hydration\"\n                                    id=\"hydration\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    placeholder=\"Final Hydration\"\n                                    value={this.state.fields.hydration}\n                                    onChange={this.handleChange.bind(this, \"hydration\")}\n                                />\n                                <Box>\n                                    <span style={{ color: \"red\" }}>{this.state.errors[\"hydration\"]}</span>\n                                </Box>\n                            </Box>\n\n                            <Box class=\"form-group\">\n                                <InputLabel for=\"formGroupExampleInput\">Starter (%)</InputLabel>\n                                <TextField\n                                    type=\"number\"\n                                    name=\"starter\"\n                                    id=\"starter\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    placeholder=\"Starter Percentage\"\n                                    value={this.state.fields.starter}\n                                    onChange={this.handleChange.bind(this, \"starter\")}\n                                />\n                                <Box>\n                                    <span style={{ color: \"red\" }}>{this.state.errors[\"starter\"]}</span>\n                                </Box>\n                            </Box>\n\n                            <Box class=\"form-group\">\n                                <InputLabel for=\"formGroupExampleInput\">Starter Hydration (%)</InputLabel>\n                                <TextField\n                                    type=\"number\"\n                                    name=\"starter_hydration\"\n                                    id=\"starter_hydration\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    placeholder=\"Starter Hydration\"\n                                    value={this.state.fields.starter_hydration}\n                                    onChange={this.handleChange.bind(this, \"starter_hydration\")}\n                                />\n                                <Box>\n                                    <span style={{ color: \"red\" }}>{this.state.errors[\"starter_hydration\"]}</span>\n                                </Box>\n                            </Box>\n\n                            <Box class=\"form-group\">\n                                <InputLabel for=\"formGroupExampleInput\">Salt (%)</InputLabel>\n                                <TextField\n                                    type=\"number\"\n                                    name=\"salt\"\n                                    id=\"salt\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    placeholder=\"Salt Percentage\"\n                                    value={this.state.fields.salt}\n                                    onChange={this.handleChange.bind(this, \"salt\")}\n                                />\n                                <Box>\n                                    <span className='error' style={{ color: \"red\" }}>{this.state.errors[\"salt\"]}</span>\n                                </Box>\n                            </Box>\n                            <Box className=\"div_button\">\n                                <Button type=\"submit\" value=\"Submit\">Calculate</Button>\n                                <Button\n                                    onClick={this.clearAll}\n                                    className=\"div_button\"\n                                >Clear</Button>\n                            </Box>\n                        </form>\n                    </Box>\n                    <Box class=\"column2\" onChange={this.handleChange} >\n                        <h1>Totals:</h1>\n                        <Box>\n                            <strong>Flour: </strong>\n                            <text\n                                id=\"result_flour\"\n                            >0g\n        </text>\n                        </Box>\n                        <Box>\n                            <strong>Water: </strong>\n                            <text\n                                id=\"result_water\"\n                            >0g\n    </text>\n                        </Box>\n                        <Box>\n                            <strong>Starter: </strong>\n                            <text\n                                id=\"result_starter\"\n                            >\n                                0g\n                            </text>\n                        </Box>\n                        <Box>\n                            <strong>Salt: </strong>\n                            <text\n                                id=\"result_salt\"\n                            >0g\n                            </text>\n                        </Box>\n                    </Box>\n                {/* <CardMedia src={Pic} styles={styles.media} component=\"img\" /> */}\n                </Box>\n            </Box>\n        );\n    }\n}\n\nexport default App;","export default __webpack_public_path__ + \"static/media/Collage.06a8e72e.png\";","export default __webpack_public_path__ + \"static/media/pic1.bafb7eb5.png\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n       <App/>,\n        document.getElementById('root'),\n)\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}