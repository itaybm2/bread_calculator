[{"/home/itaybm2/test_react/src/reportWebVitals.js":"1","/home/itaybm2/test_react/src/index.jsx":"2","/home/itaybm2/test_react/src/App.jsx":"3"},{"size":362,"mtime":1606892313018,"results":"4","hashOfConfig":"5"},{"size":468,"mtime":1607243757471,"results":"6","hashOfConfig":"5"},{"size":11262,"mtime":1607278407838,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1c3amso",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"13"},"/home/itaybm2/test_react/src/reportWebVitals.js",[],["17","18"],"/home/itaybm2/test_react/src/index.jsx",[],["19","20"],"/home/itaybm2/test_react/src/App.jsx",["21","22","23","24","25","26","27"],"import React from 'react';\nimport './App.css';\nimport Helmet from 'react-helmet';\nimport FormControl from '@material-ui/core/FormControl';\nimport { createMuiTheme, withStyles, styled } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Pic from \"./Collage.png\";\nimport Grid from '@material-ui/core/Grid';\n\n\nconst styles = (theme) => ({\n    root: {},\n    media: {\n        height: 0,\n        width: 0\n    },\n    root: {\n\n    }\n});\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fields: { dough_weight: '', hydration: '', starter: '', starter_hydration: '', salt: '' },\n            errors: {}\n        }\n        this.baseState = this.state;\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.clearAll = this.clearAll.bind(this);\n    }\n\n    calculateIngredients(amounts) {\n        var starterWaterPer = amounts.starter / (1 + (1 / amounts.starter_hydration));\n        var starterSolidPer = amounts.starter - starterWaterPer;\n        var waterPer = amounts.hydration * (1 + amounts.salt + starterSolidPer) - starterWaterPer;\n        var flour = amounts.dough_weight / (1 + waterPer + amounts.starter + amounts.salt);\n        var starter = amounts.starter * flour;\n        var salt = amounts.salt * flour;\n        var water = waterPer * flour;\n        document.getElementById(\"result_flour\").innerHTML = parseInt(flour) + \"g\"\n        document.getElementById(\"result_water\").innerHTML = parseInt(water) + \"g\"\n        document.getElementById(\"result_starter\").innerHTML = parseInt(starter) + \"g\"\n        document.getElementById(\"result_salt\").innerHTML = parseInt(salt) + \"g\"\n    }\n\n    handleValidation() {\n        let fields = this.state.fields;\n        let errors = {};\n        let formIsValid = true;\n\n        if (!fields[\"dough_weight\"]) {\n            formIsValid = false;\n            errors[\"dough_weight\"] = \"Cannot be empty\";\n        }\n        if (!fields[\"hydration\"]) {\n            formIsValid = false;\n            errors[\"hydration\"] = \"Cannot be empty\";\n        }\n        if (!fields[\"starter\"]) {\n            formIsValid = false;\n            errors[\"starter\"] = \"Cannot be empty\";\n        }\n        if (!fields[\"starter_hydration\"]) {\n            formIsValid = false;\n            errors[\"starter_hydration\"] = \"Cannot be empty\";\n        }\n        if (!fields[\"salt\"]) {\n            formIsValid = false;\n            errors[\"salt\"] = \"Cannot be empty\";\n        }\n        this.setState({ errors: errors });\n        return formIsValid;\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        if (this.handleValidation()) {\n            var dict = {\n                dough_weight: this.state.fields.dough_weight,\n                starter: parseFloat(this.state.fields.starter) / 100,\n                hydration: parseFloat(this.state.fields.hydration) / 100,\n                starter_hydration: parseFloat(this.state.fields.starter_hydration) / 100,\n                salt: parseFloat(this.state.fields.salt) / 100\n            };\n            this.calculateIngredients(dict);\n        }\n    }\n\n    clearAll(event) {\n        event.preventDefault();\n        document.getElementById(\"result_flour\").innerHTML = \"0g\";\n        document.getElementById(\"result_starter\").innerHTML = \"0g\";\n        document.getElementById(\"result_salt\").innerHTML = \"0g\";\n        document.getElementById(\"result_water\").innerHTML = \"0g\";\n        this.setState({\n            fields: { dough_weight: '', hydration: '', starter: '', starter_hydration: '', salt: '' },\n            errors: {}\n        });\n    }\n    handleChange(field, event) {\n        let fields = this.state.fields;\n        fields[field] = event.target.value;\n        // const value = target.value;\n        // const name = target.name;\n        this.setState({\n            fields\n        });\n    }\n\n\n    render() {\n        const { classes } = this.props;\n\n        const Typ = withStyles({\n            root: {\n                color: \"#92540d\",\n            }\n        })(Typography);\n\n        const styledBox = withStyles({\n            root: {\n                display: \"flex\",\n            }\n        })(Box);\n\n        return (\n            \n            <Box>\n                <Helmet>\n                <title>\n                Bread Calculator\n                </title>\n                </Helmet>\n                <Grid margin=\"50px\" container spacing={1} justify=\"center\">\n                    <Grid item xs={12}>\n                        <Typ variant=\"h2\" component=\"h1\" display=\"flex\">Sourdough Bread Calculator</Typ>\n                    </Grid>\n                    <Grid item className=\"root\" xs={2}>\n                        <Box>\n                            <FormControl className=\"form\" onSubmit={this.handleSubmit} >\n                                <Typ variant=\"h5\" >Ingredients:</Typ>\n                                <TextField\n                                    label=\"Dough Weight\"\n                                    type=\"number\"\n                                    name=\"dough_weight\"\n                                    id=\"dough_weight\"\n                                    inputmode=\"numeric\"\n                                    min=\"0\"\n                                    placeholder=\"Dough Weight in grams\"\n                                    value={this.state.fields.dough_weight}\n                                    onChange={this.handleChange.bind(this, \"dough_weight\")}\n                                />\n\n                                <TextField\n                                    label=\"Hydration\"\n                                    type=\"number\"\n                                    name=\"hydration\"\n                                    id=\"hydration\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    placeholder=\"Final Hydration\"\n                                    value={this.state.fields.hydration}\n                                    onChange={this.handleChange.bind(this, \"hydration\")}\n                                />\n\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Starter\"\n                                    name=\"starter\"\n                                    id=\"starter\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    placeholder=\"Starter Percentage\"\n                                    value={this.state.fields.starter}\n                                    onChange={this.handleChange.bind(this, \"starter\")}\n                                />\n\n                                <TextField\n                                    label=\"Starter Hydration\"\n                                    type=\"number\"\n                                    name=\"starter_hydration\"\n                                    id=\"starter_hydration\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    placeholder=\"Starter Hydration\"\n                                    value={this.state.fields.starter_hydration}\n                                    onChange={this.handleChange.bind(this, \"starter_hydration\")}\n                                />\n\n                                <TextField\n                                    label=\"Salt\"\n                                    type=\"number\"\n                                    name=\"salt\"\n                                    errorte\n                                    id=\"salt\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    placeholder=\"Salt Percentage\"\n                                    value={this.state.fields.salt}\n                                    onChange={this.handleChange.bind(this, \"salt\")}\n                                />\n\n                            </FormControl>\n                        </Box>\n                    </Grid>\n                    <Grid item xs={1} justify=\"center\" className=\"root\">\n                        <Box display=\"flex-box\">\n                            <Typ variant=\"h5\">Totals:</Typ>\n                            <Box>\n                                <strong>Flour: </strong>\n                                <text\n                                    id=\"result_flour\"\n                                >0g\n                                </text>\n                            </Box>\n                            <Box>\n                                <strong>Water: </strong>\n                                <text\n                                    id=\"result_water\"\n                                >0g\n                                </text>\n                            </Box>\n                            <Box>\n                                <strong>Starter: </strong>\n                                <text\n                                    id=\"result_starter\"\n                                >0g\n                                </text>\n                            </Box>\n                            <Box>\n                                <strong>Salt: </strong>\n                                <text\n                                    id=\"result_salt\"\n                                >0g\n                                </text>\n                            </Box>\n                        </Box>\n                    </Grid>\n                    <Grid item md = {4}>\n                            <CardMedia src={Pic} component=\"img\"></CardMedia>\n                    </Grid>\n                        <Grid item lg={9} spacing={2}>\n                            <Box margin={5} display=\"flex\" justifyContent=\"center\">\n                                <Box paddingRight=\"20%\">\n                                    <Button\n                                        variant=\"outlined\"\n                                        padding=\"20px\"\n                                        type=\"submit\"\n                                        value=\"Submit\"\n                           gi             onClick={this.handleSubmit}\n                                    >Calculate</Button>\n                                </Box>\n                                <Box>\n                                    <Button\n                                        border=\"1px\"\n                                        padding=\"40px\"\n                                        variant=\"outlined\"\n                                        onClick={this.clearAll}\n                                        className=\"div_button\"\n                                    >Clear</Button>\n                                </Box>\n                            </Box>\n                        </Grid>\n                    </Grid >\n            </Box>\n        );\n    }\n}\n\nexport default withStyles(styles)(App);",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"28","replacedBy":"32"},{"ruleId":"30","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":5,"column":10,"nodeType":"36","messageId":"37","endLine":5,"endColumn":24},{"ruleId":"34","severity":1,"message":"38","line":5,"column":38,"nodeType":"36","messageId":"37","endLine":5,"endColumn":44},{"ruleId":"34","severity":1,"message":"39","line":6,"column":8,"nodeType":"36","messageId":"37","endLine":6,"endColumn":18},{"ruleId":"34","severity":1,"message":"40","line":9,"column":8,"nodeType":"36","messageId":"37","endLine":9,"endColumn":17},{"ruleId":"41","severity":1,"message":"42","line":23,"column":5,"nodeType":"43","messageId":"44","endLine":23,"endColumn":9},{"ruleId":"34","severity":1,"message":"45","line":121,"column":17,"nodeType":"36","messageId":"37","endLine":121,"endColumn":24},{"ruleId":"34","severity":1,"message":"46","line":129,"column":15,"nodeType":"36","messageId":"37","endLine":129,"endColumn":24},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],["47"],["48"],"no-unused-vars","'createMuiTheme' is defined but never used.","Identifier","unusedVar","'styled' is defined but never used.","'InputLabel' is defined but never used.","'FormLabel' is defined but never used.","no-dupe-keys","Duplicate key 'root'.","ObjectExpression","unexpected","'classes' is assigned a value but never used.","'styledBox' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]