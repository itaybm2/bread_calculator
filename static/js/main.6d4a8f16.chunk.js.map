{"version":3,"sources":["Collage.png","App.jsx","reportWebVitals.js","index.jsx"],"names":["App","props","state","fields","dough_weight","hydration","starter","starter_hydration","salt","errors","baseState","handleChange","bind","handleSubmit","clearAll","amounts","starterWaterPer","starterSolidPer","waterPer","flour","water","document","getElementById","innerHTML","parseInt","this","formIsValid","setState","event","preventDefault","handleValidation","dict","parseFloat","calculateIngredients","field","target","value","Typ","withStyles","root","color","Typography","Grid","display","Box","container","spacing","style","flexGrow","Helmet","align","justify","padding","item","sm","variant","component","direction","md","xs","border","borderWidth","borderColor","borderRadius","flexgrow","background","FormControl","onSubmit","TextField","label","type","name","id","inputmode","min","placeholder","error","helperText","onChange","max","Starter","errorte","margin","justifyContent","paddingRight","Button","gi","onClick","className","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.6d4a8f16.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Collage.06a8e72e.png\";","import React from 'react';\nimport './App.css';\nimport Helmet from 'react-helmet';\nimport FormControl from '@material-ui/core/FormControl';\nimport { createMuiTheme, withStyles, makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Pic from \"./Collage.png\";\nimport Grid from '@material-ui/core/Grid';\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fields: { dough_weight: '', hydration: '', starter: '', starter_hydration: '', salt: '' },\n            errors: {}\n        }\n        this.baseState = this.state;\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.clearAll = this.clearAll.bind(this);\n    }\n\n    calculateIngredients(amounts) {\n        var starterWaterPer = amounts.starter / (1 + (1 / amounts.starter_hydration));\n        var starterSolidPer = amounts.starter - starterWaterPer;\n        var waterPer = amounts.hydration * (1 + amounts.salt + starterSolidPer) - starterWaterPer;\n        var flour = amounts.dough_weight / (1 + waterPer + amounts.starter + amounts.salt);\n        var starter = amounts.starter * flour;\n        var salt = amounts.salt * flour;\n        var water = waterPer * flour;\n        document.getElementById(\"result_flour\").innerHTML = parseInt(flour) + \"g\"\n        document.getElementById(\"result_water\").innerHTML = parseInt(water) + \"g\"\n        document.getElementById(\"result_starter\").innerHTML = parseInt(starter) + \"g\"\n        document.getElementById(\"result_salt\").innerHTML = parseInt(salt) + \"g\"\n    }\n\n    handleValidation() {\n        let fields = this.state.fields;\n        let errors = this.state.errors;\n        let formIsValid = true;\n\n        if (!fields[\"dough_weight\"]) {\n            formIsValid = false;\n            this.state.errors[\"dough_weight\"] = \"Cannot be empty\";\n        }\n        if (!fields[\"hydration\"]) {\n            formIsValid = false;\n            errors.hydration = \"Cannot be empty\";\n        }\n        if (!fields[\"starter\"]) {\n            formIsValid = false;\n            errors.starter = \"Cannot be empty\";\n        }\n        if (!fields[\"starter_hydration\"]) {\n            formIsValid = false;\n            errors.starter_hydration = \"Cannot be empty\";\n        }\n        if (!fields[\"salt\"]) {\n            formIsValid = false;\n            errors.salt = \"Cannot be empty\";\n        }\n        this.setState({ errors: errors });\n        return formIsValid;\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let errors = this.state.errors;\n        if (this.handleValidation()) {\n            var dict = {\n                dough_weight: this.state.fields.dough_weight,\n                starter: parseFloat(this.state.fields.starter) / 100,\n                hydration: parseFloat(this.state.fields.hydration) / 100,\n                starter_hydration: parseFloat(this.state.fields.starter_hydration) / 100,\n                salt: parseFloat(this.state.fields.salt) / 100\n            };\n            this.calculateIngredients(dict);\n            this.setState({ errors: {} })\n        }\n        else {\n            this.setState({ errors });\n        }\n    }\n\n    clearAll(event) {\n        event.preventDefault();\n        document.getElementById(\"result_flour\").innerHTML = \"0g\";\n        document.getElementById(\"result_starter\").innerHTML = \"0g\";\n        document.getElementById(\"result_salt\").innerHTML = \"0g\";\n        document.getElementById(\"result_water\").innerHTML = \"0g\";\n        this.setState({\n            fields: { dough_weight: '', hydration: '', starter: '', starter_hydration: '', salt: '' },\n            errors: {}\n        });\n    }\n    handleChange(field, event) {\n        let fields = this.state.fields;\n        fields[field] = event.target.value;\n        // const value = target.value;\n        // const name = target.name;\n        this.setState({\n            fields\n        });\n    }\n\n\n    render() {\n\n\n        const classes = this.props;\n\n        const Typ = withStyles({\n            root: {\n                color: \"#4E4E4E\",\n            }\n        })(Typography);\n\n        const myGrid = withStyles({\n            root: {\n                color: 'grey',\n            }\n        })(Grid);\n\n        const styledBox = withStyles({\n            root: {\n                display: \"flex\",\n            }\n        })(Box);\n\n\n        return (\n\n            <Grid container spacing={2} style={{flexGrow: 1}}>\n                <Helmet>\n                    <title>\n                        Bread Calculator\n                </title>\n                </Helmet>\n                <Grid container spacing={2} style={{ flexGrow: 1 }} align='center' justify='space-evenly'>\n                    <Grid style={{ flexGrow:1 ,padding: 50 }} item sm={12}>\n                        <Typ variant=\"h3\" component=\"h1\" >Sourdough Bread Calculator</Typ>\n                    </Grid>\n                    <Grid item container justify='space-around' direction=\"row\" md={4} sm={8} xs={12}\n                        style={{\n                            border: 'solid',\n                            borderWidth: 1,\n                            borderColor: 'black',\n                            borderRadius: 5,\n                            flexgrow: 1,\n                            background: 'white',\n                        }}>\n\n                        <FormControl onSubmit={this.handleSubmit} >\n                            <Grid item sm={12}>\n                                <Typ variant=\"h5\" component=\"h1\" >Ingredients:</Typ>\n                            </Grid>\n                            <Grid item sm={12}>\n                                <TextField\n                                    label=\"Dough Weight\"\n                                    type=\"number\"\n                                    name=\"dough_weight\"\n                                    id=\"dough_weight\"\n                                    inputmode=\"numeric\"\n                                    min=\"0\"\n                                    placeholder=\"Dough Weight in grams\"\n                                    value={this.state.fields.dough_weight}\n                                    error={this.state.errors.dough_weight}\n                                    helperText={this.state.errors.dough_weight ? \"Cannot be empty\" : \"\"}\n                                    onChange={this.handleChange.bind(this, \"dough_weight\")}\n                                />\n                            </Grid>\n                            <Grid item sm={12}>\n                                <TextField\n                                    label=\"Hydration\"\n                                    type=\"number\"\n                                    name=\"hydration\"\n                                    id=\"hydration\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    placeholder=\"Final Hydration\"\n                                    error={this.state.errors.hydration}\n                                    helperText={this.state.errors.hydration ? \"Cannot be empty\" : \"\"}\n                                    value={this.state.fields.hydration}\n                                    onChange={this.handleChange.bind(this, \"hydration\")}\n                                />\n                            </Grid>\n\n                            <Grid item sm={12}>\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Starter\"\n                                    name=\"starter\"\n                                    id=\"starter\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    placeholder=\"Starter Percentage\"\n                                    error={this.state.errors.starter}\n                                    helperText={this.state.errors.Starter ? \"Cannot be empty\" : \"\"}\n                                    value={this.state.fields.starter}\n                                    onChange={this.handleChange.bind(this, \"starter\")}\n                                />\n                            </Grid>\n\n                            <Grid item sm={12}>\n                                <TextField\n                                    label=\"Starter Hydration\"\n                                    type=\"number\"\n                                    name=\"starter_hydration\"\n                                    id=\"starter_hydration\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    placeholder=\"Starter Hydration\"\n                                    error={this.state.errors.starter_hydration}\n                                    helperText={this.state.errors.starter_hydration ? \"Cannot be empty\" : \"\"}\n                                    value={this.state.fields.starter_hydration}\n                                    onChange={this.handleChange.bind(this, \"starter_hydration\")}\n                                />\n                            </Grid>\n\n                            <Grid item sm={12}>\n                                <TextField\n                                    label=\"Salt\"\n                                    type=\"number\"\n                                    name=\"salt\"\n                                    errorte\n                                    id=\"salt\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    placeholder=\"Salt Percentage\"\n                                    error={this.state.errors.salt}\n                                    helperText={this.state.errors.salt ? \"Cannot be empty\" : \"\"}\n                                    value={this.state.fields.salt}\n                                    onChange={this.handleChange.bind(this, \"salt\")}\n                                />\n                            </Grid>\n                            <Grid item sm={12}>\n                                <Box margin={5} display=\"flex\" justifyContent=\"center\">\n                                    <Box paddingRight=\"20%\">\n                                        <Button\n                                            variant=\"outlined\"\n                                            type=\"submit\"\n                                            value=\"Submit\"\n                                            gi onClick={this.handleSubmit}\n                                        >Calculate</Button>\n                                    </Box>\n                                    <Box>\n                                        <Button\n                                            border=\"1px\"\n                                            variant=\"outlined\"\n                                            onClick={this.clearAll}\n                                            className=\"div_button\"\n                                        >Clear</Button>\n                                    </Box>\n                                </Box>\n                            </Grid>\n                        </FormControl>\n                    </Grid>\n                    <Grid item md={4} sm={8} xs={12}\n                        style={{\n                            border: 'solid',\n                            borderWidth: 1,\n                            borderColor: 'black',\n                            flexgrow: 1,\n                            borderRadius: 5,\n                            background: 'white'\n                        }}>\n                        <Grid item xs={12} sm={12}>\n                            <Typ variant=\"h4\" component=\"h1\">Totals:</Typ>\n                        </Grid>\n                        <Grid item sm={12}>\n                            <Box display=\"flex-box\">\n                                <Typography variant=\"h6\" display=\"inline\" >Flour: </Typography>\n                                <Typography variant=\"h6\" display=\"inline\" id=\"result_flour\"\n                                >0g\n                            </Typography>\n                            </Box>\n                        </Grid>\n                        <Grid item sm={12}>\n                            <Box margin={4}>\n                                <Typography variant=\"h6\" display=\"inline\" >Water: </Typography>\n                                <Typography variant=\"h6\" display=\"inline\" id=\"result_water\"\n                                >0g\n                            </Typography>\n                            </Box>\n                            <Grid item sm={12}>\n                                <Box margin={4}>\n                                    <Typography variant=\"h6\" display=\"inline\" >Starter: </Typography>\n                                    <Typography variant=\"h6\" display=\"inline\" id=\"result_starter\"\n                                    >0g\n                            </Typography>\n                                </Box>\n                            </Grid>\n                            <Grid item sm={12}>\n                                <Box margin={4}>\n                                    <Typography variant=\"h6\" display=\"inline\" >Salt: </Typography>\n                                    <Typography variant=\"h6\" display=\"inline\" id=\"result_salt\"\n                                    >0g\n                                    </Typography>\n                                </Box>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid >\n                {/* <Grid item xs={12} sm={5} >\n                    <CardMedia src={Pic} component=\"img\"></CardMedia>\n                </Grid> */}\n            </Grid>\n        );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n       <App/>,\n        document.getElementById('root'),\n)\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}