{"version":3,"sources":["Collage.png","App.jsx","reportWebVitals.js","index.jsx"],"names":["App","props","state","fields","dough_weight","hydration","starter","starter_hydration","salt","errors","baseState","handleChange","bind","handleSubmit","clearAll","amounts","starterWaterPer","starterSolidPer","waterPer","flour","water","document","getElementById","innerHTML","parseInt","x","min","max","this","formIsValid","key","between","setState","event","preventDefault","handleValidation","dict","parseFloat","calculateIngredients","field","target","value","Typ","withStyles","root","color","Typography","Box","margin","Helmet","name","content","property","Grid","container","spacing","align","justify","style","padding","item","xs","sm","variant","component","lg","justifyContent","height","border","borderWidth","borderColor","borderRadius","background","md","FormControl","onSubmit","TextField","label","InputProps","inputProps","id","inputmode","placeholder","error","helperText","onChange","errorte","display","paddingRight","Button","type","gi","onClick","className","paddingBottom","alignContent","CardMedia","src","Pic","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.5ba2616d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Collage.06a8e72e.png\";","import React from 'react';\nimport './App.css';\nimport Helmet from 'react-helmet';\nimport FormControl from '@material-ui/core/FormControl';\nimport { createMuiTheme, withStyles, makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Pic from \"./Collage.png\";\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fields: { dough_weight: '', hydration: '', starter: '', starter_hydration: '', salt: '' },\n            errors: {}\n        }\n        this.baseState = this.state;\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.clearAll = this.clearAll.bind(this);\n    }\n\n    calculateIngredients(amounts) {\n        var starterWaterPer = amounts.starter / (1 + (1 / amounts.starter_hydration));\n        var starterSolidPer = amounts.starter - starterWaterPer;\n        var waterPer = amounts.hydration * (1 + amounts.salt + starterSolidPer) - starterWaterPer;\n        var flour = amounts.dough_weight / (1 + waterPer + amounts.starter + amounts.salt);\n        var starter = amounts.starter * flour;\n        var salt = amounts.salt * flour;\n        var water = waterPer * flour;\n        document.getElementById(\"result_flour\").innerHTML = parseInt(flour) + \"g\"\n        document.getElementById(\"result_water\").innerHTML = parseInt(water) + \"g\"\n        document.getElementById(\"result_starter\").innerHTML = parseInt(starter) + \"g\"\n        document.getElementById(\"result_salt\").innerHTML = parseInt(salt) + \"g\"\n    }\n    between(x, min, max) {\n        return x >= min && x <= max;\n    }\n\n    handleValidation() {\n        let fields = this.state.fields;\n        let errors = this.state.errors;\n        let formIsValid = true;\n\n        for (var key in fields) {\n            if (!fields[key]) {\n                formIsValid = false;\n                errors[key] = \"Cannot be empty\";\n            }\n\n            if (fields[key] < 0) {\n                formIsValid = false;\n                errors[key] = \"Field must be in range [1,100]\";\n            }\n\n            if (key != \"dough_weight\") {\n                if (!(this.between(fields[key], 0, 100))) {\n                    formIsValid = false;\n                    errors[key] = \"Field must be in range [1,100]\";\n                }\n            }\n\n        }\n\n        this.setState({ errors: errors });\n        return formIsValid;\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let errors = this.state.errors;\n        if (this.handleValidation()) {\n            var dict = {\n                dough_weight: this.state.fields.dough_weight,\n                starter: parseFloat(this.state.fields.starter) / 100,\n                hydration: parseFloat(this.state.fields.hydration) / 100,\n                starter_hydration: parseFloat(this.state.fields.starter_hydration) / 100,\n                salt: parseFloat(this.state.fields.salt) / 100\n            };\n            this.calculateIngredients(dict);\n            this.setState({ errors: {} })\n        }\n        else {\n            this.setState({ errors });\n        }\n    }\n\n    clearAll(event) {\n        event.preventDefault();\n        document.getElementById(\"result_flour\").innerHTML = \"0g\";\n        document.getElementById(\"result_starter\").innerHTML = \"0g\";\n        document.getElementById(\"result_salt\").innerHTML = \"0g\";\n        document.getElementById(\"result_water\").innerHTML = \"0g\";\n        this.setState({\n            fields: { dough_weight: '', hydration: '', starter: '', starter_hydration: '', salt: '' },\n            errors: {}\n        });\n    }\n    handleChange(field, event) {\n        let fields = this.state.fields;\n        fields[field] = event.target.value;\n        // const value = target.value;\n        // const name = target.name;\n        this.setState({\n            fields\n        });\n    }\n\n\n    render() {\n\n        const Typ = withStyles({\n            root: {\n                color: \"#4E4E4E\",\n            }\n        })(Typography);\n\n\n        return (\n            <Box margin={5}>\n                <Helmet>\n                    <title>\n                        Bread Calculator\n                </title>\n                    <meta name=\"description\" content=\"Sourdough bread calculator, using baker percentage and dough weight\n                    to calculate your next sourdough bread recipe.\" />\n                    <meta property=\"og:title\" content=\"Sourdough Bread Calculator\" />\n                    <meta property=\"og:url\" content=\"https://itaybm2.github.io/bread_calculator/\" />\n                    <meta property=\"og:description\" content=\"Sourdough Bread Calculator\"/>\n                    <meta property=\"og:image\" content=\"./Collage.png\"/>\n                </Helmet>\n                    <Grid container spacing={5} align='center' justify='space-around'>\n                        <Grid style={{ padding: 50 }} item xs={12} sm={12}>\n                            <Typ variant=\"h3\" component=\"h1\" >Sourdough Bread Calculator</Typ>\n                        </Grid>\n\n\n                        <Grid item align='center' lg={3} xs={11}>\n                            <Box justify='center' justifyContent='center'\n                                style={{\n                                    height: '100%',\n                                    border: 'solid',\n                                    borderWidth: 1,\n                                    borderColor: 'black',\n                                    borderRadius: 5,\n                                    background: 'white',\n                                }}>\n                                <Grid item md={12} sm={12}>\n                                    <Typ variant=\"h5\" component=\"h1\" >Ingredients:</Typ>\n                                </Grid>\n                                <Grid container align='center' justify='center'>\n\n                                    <FormControl onSubmit={this.handleSubmit} >\n                                        <Grid item xs={12} sm={12} md={12}>\n                                            <TextField\n                                                label=\"Dough Weight\"\n                                                InputProps={{\n                                                    inputProps: {\n                                                        min: 0\n                                                    }\n                                                }}\n                                                name=\"dough_weight\"\n                                                id=\"dough_weight\"\n                                                inputmode=\"numeric\"\n                                                placeholder=\"Dough Weight in grams\"\n                                                value={this.state.fields.dough_weight}\n                                                error={this.state.errors.dough_weight}\n                                                helperText={this.state.errors.dough_weight ? this.state.errors.dough_weight : \"\"}\n                                                onChange={this.handleChange.bind(this, \"dough_weight\")}\n                                            />\n                                        </Grid>\n                                        <Grid item sm={12}>\n                                            <TextField\n                                                label=\"Hydration\"\n                                                name=\"hydration\"\n                                                id=\"hydration\"\n                                                InputProps={{\n                                                    inputProps: {\n                                                        min: '0', max: '100'\n                                                    }\n                                                }}\n                                                placeholder=\"Final Hydration\"\n                                                error={this.state.errors.hydration}\n                                                helperText={this.state.errors.hydration ? this.state.errors.hydration : \"\"}\n                                                value={this.state.fields.hydration}\n                                                onChange={this.handleChange.bind(this, \"hydration\")}\n                                            />\n                                        </Grid>\n\n                                        <Grid item sm={12}>\n                                            <TextField\n                                                label=\"Starter\"\n                                                name=\"starter\"\n                                                id=\"starter\"\n                                                min=\"0\"\n                                                max=\"100\"\n                                                placeholder=\"Starter Percentage\"\n                                                error={this.state.errors.starter}\n                                                helperText={this.state.errors.starter ? this.state.errors.starter : \"\"}\n                                                value={this.state.fields.starter}\n                                                onChange={this.handleChange.bind(this, \"starter\")}\n                                            />\n                                        </Grid>\n\n                                        <Grid item sm={12}>\n                                            <TextField\n                                                label=\"Starter Hydration\"\n                                                name=\"starter_hydration\"\n                                                id=\"starter_hydration\"\n                                                placeholder=\"Starter Hydration\"\n                                                error={this.state.errors.starter_hydration}\n                                                helperText={this.state.errors.starter_hydration ? this.state.errors.starter_hydration : \"\"}\n                                                value={this.state.fields.starter_hydration}\n                                                onChange={this.handleChange.bind(this, \"starter_hydration\")}\n                                            />\n                                        </Grid>\n\n                                        <Grid item sm={12}>\n                                            <TextField\n                                                label=\"Salt\"\n                                                name=\"salt\"\n                                                errorte\n                                                id=\"salt\"\n                                                placeholder=\"Salt Percentage\"\n                                                error={this.state.errors.salt}\n                                                helperText={this.state.errors.salt ? \"Cannot be empty\" : \"\"}\n                                                value={this.state.fields.salt}\n                                                onChange={this.handleChange.bind(this, \"salt\")}\n                                            />\n                                        </Grid>\n                                        <Grid item sm={12}>\n                                            <Box margin={5} display=\"flex\" justifyContent=\"center\">\n                                                <Box paddingRight=\"20%\">\n                                                    <Button\n                                                        variant=\"outlined\"\n                                                        type=\"submit\"\n                                                        value=\"Submit\"\n                                                        gi onClick={this.handleSubmit}\n                                                    >Calculate</Button>\n                                                </Box>\n                                                <Box>\n                                                    <Button\n                                                        border=\"1px\"\n                                                        variant=\"outlined\"\n                                                        onClick={this.clearAll}\n                                                        className=\"div_button\"\n                                                    >Clear</Button>\n                                                </Box>\n                                            </Box>\n                                        </Grid>\n                                    </FormControl>\n                                </Grid>\n\n                            </Box>\n                        </Grid>\n\n                        <Grid item xs={9} lg={3}>\n                            <Box style={{\n                                border: 'solid',\n                                height: '100%',\n                                borderWidth: 1,\n                                borderColor: 'black',\n                                borderRadius: 5,\n                                background: 'white',\n                            }}>\n                                <Grid item xs={12} sm={12}>\n                                    <Typ style={{ paddingBottom: 20 }} variant=\"h5\" component=\"h1\">Totals:</Typ>\n                                </Grid>\n                                <Grid item sm={12}>\n                                    <Box display=\"flex-box\">\n                                        <Typography variant=\"h6\" display=\"inline\" >Flour: </Typography>\n                                        <Typography variant=\"h6\" display=\"inline\" id=\"result_flour\"\n                                        >0g\n                        </Typography>\n                                    </Box>\n                                </Grid>\n                                <Grid item sm={12}>\n                                    <Box margin={4}>\n                                        <Typography variant=\"h6\" display=\"inline\" >Water: </Typography>\n                                        <Typography variant=\"h6\" display=\"inline\" id=\"result_water\"\n                                        >0g\n                        </Typography>\n                                    </Box>\n                                    <Grid item sm={12}>\n                                        <Box margin={4}>\n                                            <Typography variant=\"h6\" display=\"inline\" >Starter: </Typography>\n                                            <Typography variant=\"h6\" display=\"inline\" id=\"result_starter\"\n                                            >0g\n                        </Typography>\n                                        </Box>\n                                    </Grid>\n                                    <Grid item sm={12}>\n                                        <Box margin={4}>\n                                            <Typography variant=\"h6\" display=\"inline\" >Salt: </Typography>\n                                            <Typography variant=\"h6\" display=\"inline\" id=\"result_salt\"\n                                            >0g\n                                </Typography>\n                                        </Box>\n                                    </Grid>\n                                </Grid>\n                            </Box>\n                        </Grid>\n                        <Grid alignContent='center' align='center' item xs={12} sm={8} md={4}>\n                            <CardMedia src={Pic} component=\"img\"></CardMedia>\n                        </Grid>\n                    </Grid >\n            </Box >\n\n\n        );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n       <App/>,\n        document.getElementById('root'),\n)\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}